#!/usr/bin/env ruby
# Wallpaper switcher

# Author: Christian Brassat
# AKA: crshd
# Email: christian@crshd.cc

# Copyright: 2011 Christian Brassat
# License: MIT

# I NEED this! {{{
require "RMagick"
include Magick

require "~/.config/gempaper.rb"
# End Requires }}}

# Colors are nice. It's "Ruby" after all... {{{
def colorize( text, color_code )
  "#{color_code}#{text}\e[0m"
end

def red( text ); colorize( text, "\e[31m" ); end
def green( text ); colorize( text, "\e[32m" ); end
def yellow( text ); colorize( text, "\e[33m" ); end
def blue( text ); colorize( text, "\e[34m" ); end
# End Color }}}

# GTFO! (or: Gracefully Terminate iF without Options) {{{
def help
  puts "Usage:"
  puts "  " + green( "help" ) + "\t\t\t" + yellow( "Show this help and exit" )
  puts "  " + green( "list" ) + "\t\t\t" + yellow( "Show list of available Wallpapers" )
  puts "  " + green( "set [file [file2]]" ) + "\t" + yellow( "Set file as Wallpaper after applying
\t\t\tfile2 as shadow
\t\t\tIf no files at all are specified,
\t\t\ta random image is used." )
  puts "  " + green( "show file" ) + "\t\t" + yellow( "Preview file" )
  exit 0
end
# End Terminate }}}

# Is this all you got? (List Wallpapers) {{{
def list
  glob = Dir.glob( "*.{jpg,jpeg,png}" ).sort!
  for n in 0...glob.length do
    img = ImageList.new( glob[n] )
    puts green( n ) + "\t" + blue( glob[n] )
    puts "\t" + img.columns.to_s + "x" + img.rows.to_s + "\n\n"
  end
end
# End List }}}

# Show me NAO! (Preview Image) {{{
def show( path )
  ImageList.new( path ).display
end
# End Preview }}}

# I want it (Set Wallpaper) {{{
def set( path, shadow )
  # Set shadow length
  shl = ( $shadow_length/2 )

	# Set shadow opacity
	so = "#" + $shadow_opacity + $shadow_opacity + $shadow_opacity

  # Draw top shadow
  sht_mask = Image.new( $width, $panel_top_height + shl ) { self.background_color = so }
  stm = Draw.new
  stm.fill "black"
  stm.rectangle 0,0,$width,$panel_top_height
  stm.draw( sht_mask )
  sht_mask = sht_mask.blur_image( 0, shl )
  sht_mask.flip!

  sht = Image.new( $width, $panel_top_height + shl )
  st = Draw.new
  st.fill $shadow_color
  st.rectangle 0,0,$width,( $panel_top_height + shl )
  st.draw( sht )
  
  sht_mask.matte = false
  sht.matte = true
  sht.composite!( sht_mask, CenterGravity, CopyOpacityCompositeOp )

  # Draw bottom shadow
  shb_mask = Image.new( $width, $panel_bottom_height + shl ) { self.background_color = so }
  sbm = Draw.new
  sbm.fill "black"
  sbm.rectangle 0,0,$width,$panel_bottom_height
  sbm.draw( shb_mask )
  shb_mask = shb_mask.blur_image( 0, shl )

  shb = Image.new( $width, $panel_bottom_height + shl )
  sb = Draw.new
  sb.fill $shadow_color
  sb.rectangle 0,0,$width,( $panel_bottom_height + shl )
  sb.draw( shb )
  
  shb_mask.matte = false
  shb.matte = true
  shb.composite!( shb_mask, CenterGravity, CopyOpacityCompositeOp )

  img = ImageList.new( path ).resize_to_fill( $width, $height )
  img.composite!( sht, NorthGravity, 0, $panel_top_height, OverCompositeOp )
  img.composite!( shb, SouthGravity, 0, $panel_bottom_height, OverCompositeOp )
  img.write( $output )
  exec( "feh --bg-fill " + $output )
end
# }}}

# What did you say? {{{
Dir.chdir( $dir )

if ARGV.length == 0
  help
end

if ARGV[0] == "help"
  help
end
  
if ARGV[0] == "list"
  list
end

if ARGV[0] == "show"
  path = $dir + ARGV[1]
  show( path )
end

if ARGV[0] == "set"
  if ARGV[1] == nil
    glob = Dir.glob( "*.{jpg,jpeg,png}" )
    path = $dir + glob[rand( glob.size )]
  else
    path = $dir + ARGV[1]
  end
  if ARGV[2] != nil
    shadow = ARGV[2]
  end
  set( path, shadow )
end
# End What }}}

#  vim: set ts=2 sw=2 tw=0 :
